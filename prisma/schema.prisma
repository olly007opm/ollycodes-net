generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  username      String?   @unique
  newUser       Boolean   @default(true)
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  admin         Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  folders       Folder[]  @relation("UserFolders")
  homeFolder    Folder?   @relation("HomeFolder", fields: [homeFolderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  homeFolderId  String?   @unique @db.ObjectId
  desktop       Desktop?
  chats         Chat[]    @relation(fields: [chatIds], references: [id])
  chatIds       String[]  @db.ObjectId
  messages      Message[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Folder {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  displayName String?
  icon        String?
  owner       User     @relation("UserFolders", fields: [ownerId], references: [id])
  ownerId     String   @db.ObjectId
  homeUser    User?    @relation("HomeFolder")
  parent      Folder?  @relation("FolderToFolder", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId    String?  @db.ObjectId
  children    Folder[] @relation("FolderToFolder")
  files       File[]
  public      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model File {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  folder    Folder   @relation(fields: [folderId], references: [id])
  folderId  String   @db.ObjectId
  type      FileType @relation(fields: [typeId], references: [id])
  typeId    String   @db.ObjectId
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FileType {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  identifier  String
  extension   String
  description String
  icon        String?
  files       File[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Chat {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  users     User[]    @relation(fields: [userIds], references: [id])
  userIds   String[]  @db.ObjectId
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Desktop {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  user      User          @relation(fields: [userId], references: [id])
  userId    String        @unique @db.ObjectId
  color     String        @default("#008080")
  items     DesktopItem[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model DesktopItem {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  x         Int
  y         Int
  icon      DesktopIcon @relation(fields: [iconId], references: [id])
  iconId    String      @db.ObjectId
  desktop   Desktop     @relation(fields: [desktopId], references: [id])
  desktopId String      @db.ObjectId
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model DesktopIcon {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  image     String
  action    String
  defaultX  Int?
  defaultY  Int?
  items     DesktopItem[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String   @db.ObjectId
  sessionToken String   @unique
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}
